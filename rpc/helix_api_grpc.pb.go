// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TwitchCacheClient is the client API for TwitchCache service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitchCacheClient interface {
	GetUsersAndGames(ctx context.Context, in *UsersAndGamesParams, opts ...grpc.CallOption) (*UsersAndGames, error)
	GetUsers(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Users, error)
	GetGames(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Games, error)
	GetStreams(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Streams, error)
	SearchChannels(ctx context.Context, in *ChannelSearchQuery, opts ...grpc.CallOption) (*Channels, error)
	GetStatus(ctx context.Context, in *StatusParams, opts ...grpc.CallOption) (*Status, error)
}

type twitchCacheClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitchCacheClient(cc grpc.ClientConnInterface) TwitchCacheClient {
	return &twitchCacheClient{cc}
}

func (c *twitchCacheClient) GetUsersAndGames(ctx context.Context, in *UsersAndGamesParams, opts ...grpc.CallOption) (*UsersAndGames, error) {
	out := new(UsersAndGames)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/GetUsersAndGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchCacheClient) GetUsers(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Users, error) {
	out := new(Users)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/GetUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchCacheClient) GetGames(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Games, error) {
	out := new(Games)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/GetGames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchCacheClient) GetStreams(ctx context.Context, in *MultiQuery, opts ...grpc.CallOption) (*Streams, error) {
	out := new(Streams)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/GetStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchCacheClient) SearchChannels(ctx context.Context, in *ChannelSearchQuery, opts ...grpc.CallOption) (*Channels, error) {
	out := new(Channels)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/SearchChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchCacheClient) GetStatus(ctx context.Context, in *StatusParams, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/rpc.TwitchCache/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitchCacheServer is the server API for TwitchCache service.
// All implementations must embed UnimplementedTwitchCacheServer
// for forward compatibility
type TwitchCacheServer interface {
	GetUsersAndGames(context.Context, *UsersAndGamesParams) (*UsersAndGames, error)
	GetUsers(context.Context, *MultiQuery) (*Users, error)
	GetGames(context.Context, *MultiQuery) (*Games, error)
	GetStreams(context.Context, *MultiQuery) (*Streams, error)
	SearchChannels(context.Context, *ChannelSearchQuery) (*Channels, error)
	GetStatus(context.Context, *StatusParams) (*Status, error)
	mustEmbedUnimplementedTwitchCacheServer()
}

// UnimplementedTwitchCacheServer must be embedded to have forward compatible implementations.
type UnimplementedTwitchCacheServer struct {
}

func (UnimplementedTwitchCacheServer) GetUsersAndGames(context.Context, *UsersAndGamesParams) (*UsersAndGames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersAndGames not implemented")
}
func (UnimplementedTwitchCacheServer) GetUsers(context.Context, *MultiQuery) (*Users, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedTwitchCacheServer) GetGames(context.Context, *MultiQuery) (*Games, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGames not implemented")
}
func (UnimplementedTwitchCacheServer) GetStreams(context.Context, *MultiQuery) (*Streams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStreams not implemented")
}
func (UnimplementedTwitchCacheServer) SearchChannels(context.Context, *ChannelSearchQuery) (*Channels, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchChannels not implemented")
}
func (UnimplementedTwitchCacheServer) GetStatus(context.Context, *StatusParams) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedTwitchCacheServer) mustEmbedUnimplementedTwitchCacheServer() {}

// UnsafeTwitchCacheServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitchCacheServer will
// result in compilation errors.
type UnsafeTwitchCacheServer interface {
	mustEmbedUnimplementedTwitchCacheServer()
}

func RegisterTwitchCacheServer(s grpc.ServiceRegistrar, srv TwitchCacheServer) {
	s.RegisterService(&TwitchCache_ServiceDesc, srv)
}

func _TwitchCache_GetUsersAndGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UsersAndGamesParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).GetUsersAndGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/GetUsersAndGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).GetUsersAndGames(ctx, req.(*UsersAndGamesParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchCache_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).GetUsers(ctx, req.(*MultiQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchCache_GetGames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).GetGames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/GetGames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).GetGames(ctx, req.(*MultiQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchCache_GetStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).GetStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/GetStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).GetStreams(ctx, req.(*MultiQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchCache_SearchChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelSearchQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).SearchChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/SearchChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).SearchChannels(ctx, req.(*ChannelSearchQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitchCache_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchCacheServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TwitchCache/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchCacheServer).GetStatus(ctx, req.(*StatusParams))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitchCache_ServiceDesc is the grpc.ServiceDesc for TwitchCache service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitchCache_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TwitchCache",
	HandlerType: (*TwitchCacheServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersAndGames",
			Handler:    _TwitchCache_GetUsersAndGames_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _TwitchCache_GetUsers_Handler,
		},
		{
			MethodName: "GetGames",
			Handler:    _TwitchCache_GetGames_Handler,
		},
		{
			MethodName: "GetStreams",
			Handler:    _TwitchCache_GetStreams_Handler,
		},
		{
			MethodName: "SearchChannels",
			Handler:    _TwitchCache_SearchChannels_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _TwitchCache_GetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "helix_api.proto",
}
